Description: Remove code of asciidoctor-gradle-plugin
Author: Komal Sukhani <komaldsukhani@gmail.com> 
Forwarded: no 
Last-Update: 2015-06-22
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: alioth-groovy2/gradle/docs.gradle
===================================================================
--- alioth-groovy2.orig/gradle/docs.gradle
+++ alioth-groovy2/gradle/docs.gradle
@@ -1,22 +1,8 @@
 task doc(dependsOn: ['javadocAll', 'groovydocAll', 'docGDK']) {
-    if (JavaVersion.current().java7Compatible) {
-        dependsOn 'asciidocAll', 'assembleAsciidoc'
-    }
     ext.footer = 'Copyright &amp;copy; 2003-2014 The Codehaus. All rights reserved.'
     ext.title = "Groovy ${groovyVersion}"
 }
 
-if (JavaVersion.current().java7Compatible) {
-    task assembleAsciidoc(type: Copy, dependsOn: 'asciidocAll') {
-        subprojects {
-            from project.asciidoctor
-        }
-        into "$buildDir/asciidoc"
-    }
-
-    task asciidocAll(dependsOn: 'asciidoctor')
-}
-
 def javadocSpec = {
     maxMemory = javaDoc_mx
     project.configure(options) {
@@ -102,66 +88,10 @@ task docProjectVersionInfo(type: Copy) {
 
 task docGDK {
 //    ext.extraDocGDKclasses = []
-    dependsOn([project(':groovy-groovydoc'), project(':groovy-docgenerator')]*.classes)
     // TODO don't hard-code these
-    dependsOn([project(':groovy-sql'), project(':groovy-xml'), project(':groovy-swing')]*.classes)
-    if(JavaVersion.current().isJava7Compatible()) {
-        dependsOn([project(':groovy-nio')]*.classes)
-    }
-    dependsOn docProjectVersionInfo
     ext.destinationDir = "$buildDir/html/groovy-jdk"
     inputs.files sourceSets.tools.runtimeClasspath
     outputs.dir destinationDir
-    doLast { task ->
-        try {
-            ant {
-                java(classname: 'org.codehaus.groovy.tools.DocGenerator',
-                     fork: 'true',
-                     failonerror: 'true',
-                     classpath: (configurations.tools + groovydocAll.groovyClasspath).asPath,
-                     errorproperty: 'edr',
-                     outputproperty: 'odr') {
-                    arg(value: '-title')
-                    arg(value: 'Groovy JDK enhancements')
-                    arg(value: '-link')
-                    arg(value: 'groovy,org.codehaus.groovy=http://groovy.codehaus.org/gapi/')
-                    arg(value: '-link')
-                    arg(value: 'java,org.xml,javax,org.w3c=http://docs.oracle.com/javase/7/docs/api/')
-                    // either package name if in core or fully qualified path otherwise
-                    arg(value: 'org.codehaus.groovy.runtime.DefaultGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.DefaultGroovyStaticMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.DateGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.EncodingGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.IOGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.ProcessGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.ResourceGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.SocketGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.StringGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.vmplugin.v5.PluginDefaultGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.vmplugin.v6.PluginDefaultGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.vmplugin.v6.PluginStaticGroovyMethods')
-                    // TODO don't hard-code these
-                    arg(value: 'subprojects/groovy-sql/src/main/java/org/codehaus/groovy/runtime/SqlGroovyMethods.java')
-                    arg(value: 'subprojects/groovy-swing/src/main/java/org/codehaus/groovy/runtime/SwingGroovyMethods.java')
-                    arg(value: 'subprojects/groovy-xml/src/main/java/org/codehaus/groovy/runtime/XmlGroovyMethods.java')
-                    if(JavaVersion.current().isJava7Compatible()) {
-                        arg(value: 'subprojects/groovy-nio/src/main/java/org/codehaus/groovy/runtime/NioGroovyMethods.java')
-                    }
-                }
-            }
-        } finally {
-            if (ant.properties.odr) {
-                logger.info 'Out: ' + ant.properties.odr
-            }
-            if (ant.properties.edr) {
-                logger.error 'Err: ' + ant.properties.edr
-            }
-        }
-        copy {
-            into task.destinationDir
-            from 'src/tools/org/codehaus/groovy/tools/groovy.ico', 'src/tools/org/codehaus/groovy/tools/stylesheet.css'
-        }
-    }
 }
 
 // this will apply the javadoc fix tool to all generated javadocs
@@ -170,10 +100,10 @@ allprojects {
     tasks.withType(Javadoc).all {
         doLast {
             logger.lifecycle("Applying Javadoc fix tool (see http://www.kb.cert.org/vuls/id/225657) into $destinationDir".toString())
-            def javadocFix = new JavadocFixTool()
-            javadocFix.recursive = true
-            javadocFix.doPatch = true
-            javadocFix.searchAndPatch(destinationDir)
+          //  def javadocFix = new JavadocFixTool()
+           // javadocFix.recursive = true
+           // javadocFix.doPatch = true
+           // javadocFix.searchAndPatch(destinationDir)
         }
     }
 }
@@ -189,4 +119,4 @@ if (JavaVersion.current().isJava8Compati
             options.addStringOption('Xdoclint:none', '-quiet')
         }
     }
-}
\ No newline at end of file
+}
