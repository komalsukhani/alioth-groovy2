Description: Build Groovy with libraries available in Debian
Author: Miguel Landaeta <miguel@miguel.cc>
Forwarded: no
Last-Update: 2013-12-01

--- groovy-2.2.1+dfsg.orig/build.gradle
+++ groovy-2.2.1+dfsg/build.gradle
@@ -3,14 +3,17 @@ apply from: 'gradle/indy.gradle'
 
 buildscript {
     repositories {
+        /*
         mavenCentral()
         mavenRepo name: 'Bintray Asciidoctor repo', url: 'http://dl.bintray.com/content/aalmiray/asciidoctor'
         mavenRepo name: 'Bintray JCenter', url: 'http://jcenter.bintray.com'
+        */
+        mavenRepo url: "file:///usr/share/maven-repo"
     }
 
     dependencies {
-        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.5.0'
-        classpath 'net.saliman:gradle-cobertura-plugin:1.1.2'
+        //classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.5.0'
+        //classpath 'net.saliman:gradle-cobertura-plugin:1.1.2'
     }
 }
 
@@ -27,7 +30,8 @@ allprojects {
     group = 'org.codehaus.groovy'
     version = groovyVersion
     repositories {
-        mavenCentral()
+        //mavenCentral()
+        mavenRepo url: "file:///usr/share/maven-repo"
     }
 
     apply plugin: 'checkstyle'
@@ -40,6 +44,7 @@ allprojects {
         // do nothing on JDK 5 as gradle fails to create a proxy for the AsciidoctorTask
         logger.warn 'You must run on JDK 6+ to be able to generate the Asciidoc documentation.'
     } else {
+        /*
         apply plugin: 'asciidoctor'
 
         asciidoctor {
@@ -49,6 +54,7 @@ allprojects {
 
         // skip the asciidoctor task if there's no directory with asciidoc files
         asciidoctor.onlyIf { project.file('src/spec/doc').exists() }
+        */
     }
 
     // don't fail build on CodeNarc tasks
@@ -119,8 +125,11 @@ subprojects {
 repositories {
     // todo Some repos are needed only for some configs. Declare them just for the configuration once Gradle allows this.
 //    mavenCentral() // default, tools
+    /*
     maven { url 'http://www.aQute.biz/repo' } // tools
     maven { url 'http://repository.jboss.org/maven2' } // examples, tools
+    */
+    mavenRepo url: "file:///usr/share/maven-repo"
 }
 
 // todo do we need compile and runtime scope for examples?
@@ -134,30 +143,30 @@ configurations {
 }
 
 dependencies {
-    def antVersion = '1.9.2'
-    def asmVersion = '4.1'
+    def antVersion = 'debian'
+    def asmVersion = '4.x'
     def antlrVersion = '2.7.7'
-    def bndVersion = '0.0.401'
-    def checkstyleVersion = '4.4'
+    def bndVersion = 'debian'
+    def checkstyleVersion = '5.6'
     def coberturaVersion = '1.9.4.1'
     def commonsCliVersion = '1.2'
     def commonsHttpClientVersion = '3.1'
     def eclipseOsgiVersion = '3.5.0.v20090520'
     def gparsVersion = '1.1.0'
-    def ivyVersion = '2.3.0'
-    def jansiVersion = '1.10'
-    def jarjarVersion = '1.3'
+    def ivyVersion = 'debian'
+    def jansiVersion = 'debian'
+    def jarjarVersion = '1.4-SNAPSHOT'
     def jmockVersion = '1.2.0'
     def logbackVersion = '0.9.21'
     def log4jVersion = '1.2.16'
     def log4j2Version = '2.0-beta9'
     def luceneVersion = '4.3.1'
     def openejbVersion = '1.0'
-    def qdoxVersion = '1.12.1'
+    def qdoxVersion = 'debian'
     def simianVersion = '2.2.4'
     def slf4jVersion = '1.6.0'
     def xmlunitVersion = '1.3'
-    def xstreamVersion = '1.4.4'
+    def xstreamVersion = 'debian'
 
     compilerCompile "antlr:antlr:$antlrVersion"
     compilerCompile "org.ow2.asm:asm:$asmVersion"
@@ -197,7 +206,7 @@ dependencies {
     compile("org.apache.ivy:ivy:$ivyVersion") {
         transitive = false
     }
-    runtime "org.codehaus.gpars:gpars:$gparsVersion"
+    //runtime "org.codehaus.gpars:gpars:$gparsVersion"
     testCompile "jmock:jmock:$jmockVersion"
     testCompile "jmock:jmock-cglib:$jmockVersion"
     testCompile "xmlunit:xmlunit:$xmlunitVersion"
@@ -208,10 +217,10 @@ dependencies {
     testCompile "com.thoughtworks.qdox:qdox:$qdoxVersion"
 
     tools "com.googlecode.jarjar:jarjar:$jarjarVersion"
-    tools("checkstyle:checkstyle:$checkstyleVersion") {
+    tools("com.puppycrawl.tools:checkstyle:$checkstyleVersion") {
         exclude(module: 'junit')
     }
-    tools "redhill:simian:$simianVersion"
+    //tools "redhill:simian:$simianVersion"
     tools("net.sourceforge.cobertura:cobertura:$coberturaVersion") {
         exclude(module: 'asm')
         exclude(module: 'asm')
@@ -497,6 +506,7 @@ if (file('user.gradle').exists()) {
     apply from: 'user.gradle'
 }
 
+/*
 allprojects {
     apply plugin: 'cobertura'
     cobertura {
@@ -504,10 +514,13 @@ allprojects {
         coverageReportDir = file("$buildDir/reports/cobertura")
     }
 }
+*/
 
+/*
 wrapper {
     gradleVersion = '1.7'
 }
+*/
 
 // produce warning if running on 1.5 or 1.6
 if (isJava15() || isJava16()) {
--- groovy-2.2.1+dfsg.orig/gradle/assemble.gradle
+++ groovy-2.2.1+dfsg/gradle/assemble.gradle
@@ -315,17 +315,17 @@ ext.distSpec = copySpec {
     from("$projectDir") {
         include 'LICENSE.txt', 'NOTICE.txt'
     }
-    into('lib') {
-        from jar.archivePath
-        from({
-            configurations.runtime.findAll { it.name.endsWith 'jar' } +
-                    modules()*.jar.archivePath +
-                    modules().configurations.runtime*.findAll {
-                        it.name.endsWith('jar') && !it.name.contains('livetribe-jsr223') && !it.name.matches(/groovy-\d.*/)
-                    }.flatten() as Set
-        })
-        from('src/bin/groovy.icns')
-    }
+    //into('lib') {
+    //    from jar.archivePath
+    //    from({
+    //        configurations.runtime.findAll { it.name.endsWith 'jar' } +
+    //                modules()*.jar.archivePath +
+    //                modules().configurations.runtime*.findAll {
+    //                    it.name.endsWith('jar') && !it.name.contains('livetribe-jsr223') && !it.name.matches(/groovy-\d.*/)
+    //                }.flatten() as Set
+    //    })
+    //    from('src/bin/groovy.icns')
+    //}
     into('indy') {
         from { new File(jar.archivePath.parent, "${jar.baseName}-${jar.version}-indy.jar") }
         from {
--- groovy-2.2.1+dfsg.orig/gradle/codehaus.gradle
+++ groovy-2.2.1+dfsg/gradle/codehaus.gradle
@@ -1,44 +1,44 @@
-import com.github.sardine.*
-import com.github.sardine.impl.*
-import groovy.io.*
-
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.github.lookfirst:sardine:5.0.1'
-    }
-}
-
+//import com.github.sardine.*
+//import com.github.sardine.impl.*
+//import groovy.io.*
+//
+//buildscript {
+//    repositories {
+//        mavenCentral()
+//    }
+//    dependencies {
+//        classpath 'com.github.lookfirst:sardine:5.0.1'
+//    }
+//}
+//
 task htmlPush {
     //inputs.files syncDoc.inputs.files
-
-    doLast {
-        def sardine = SardineFactory.begin(System.getProperty('groovy.deploy.username'), System.getProperty('groovy.deploy.password'))
-        def serverBase = "https://dav.codehaus.org/groovy/"
+//
+//    doLast {
+//        def sardine = SardineFactory.begin(System.getProperty('groovy.deploy.username'), System.getProperty('groovy.deploy.password'))
+//        def serverBase = "https://dav.codehaus.org/groovy/"
         //sardine.list(serverBase).each {println it}
         def copyConf = ["gapi":file("$buildDir/allgroovydoc"), "api":file("$buildDir/alljavadoc")]
 
-        copyConf.each { targetDirPart, base ->
-            def basePath = base.canonicalPath
-            base.eachFileRecurse {
-                def name = it.canonicalPath.substring(basePath.length()+1)
-                def target = serverBase+targetDirPart+"/"+name
-                if (it.directory) {
-                    println "MKCOL $target"
-                    try {
-                        sardine.createDirectory(target+"/");
-                    } catch (SardineException se) {
-                        //ignore 405, thrown for existing directories
-                        if (se.statusCode != 405) throw se 
-                    }
-                } else {
-                    println "PUT $target"
-                    sardine.put (target, it.newInputStream())
-                }
-                
-            }
-        }
-    }
+//        copyConf.each { targetDirPart, base ->
+//            def basePath = base.canonicalPath
+//            base.eachFileRecurse {
+//                def name = it.canonicalPath.substring(basePath.length()+1)
+//                def target = serverBase+targetDirPart+"/"+name
+//                if (it.directory) {
+//                    println "MKCOL $target"
+//                    try {
+//                        sardine.createDirectory(target+"/");
+//                    } catch (SardineException se) {
+//                        //ignore 405, thrown for existing directories
+//                        if (se.statusCode != 405) throw se 
+//                    }
+//                } else {
+//                    println "PUT $target"
+//                    sardine.put (target, it.newInputStream())
+//                }
+//                
+//            }
+//        }
+//    }
 }
--- groovy-2.2.1+dfsg.orig/gradle/docs.gradle
+++ groovy-2.2.1+dfsg/gradle/docs.gradle
@@ -4,12 +4,14 @@ task doc(dependsOn: ['asciidocAll', 'ass
 }
 
 task assembleAsciidoc(type: Copy, dependsOn: 'asciidocAll') {
+    /*
     if (!isJava15()) {
         subprojects {
             from project.asciidoctor
         }
         into "$buildDir/asciidoc"
     }
+    */
 }
 
 def javadocSpec = {
@@ -52,7 +54,8 @@ allprojects {
     groovydoc groovydocSpec
 
     if (!isJava15()) {
-        task asciidocAll(dependsOn: 'asciidoctor')
+        //task asciidocAll(dependsOn: 'asciidoctor')
+        task asciidocAll()
     }
 }
 
@@ -100,55 +103,55 @@ task docProjectVersionInfo(type: Copy) {
 }
 
 task docGDK {
-//    ext.extraDocGDKclasses = []
-    dependsOn([project(':groovy-groovydoc'), project(':groovy-docgenerator')]*.classes)
-    // TODO don't hard-code these
-    dependsOn([project(':groovy-sql'), project(':groovy-sql'), project(':groovy-swing')]*.classes)
-    dependsOn docProjectVersionInfo
+////    ext.extraDocGDKclasses = []
+//    dependsOn([project(':groovy-groovydoc'), project(':groovy-docgenerator')]*.classes)
+//    // TODO don't hard-code these
+//    dependsOn([project(':groovy-sql'), project(':groovy-sql'), project(':groovy-swing')]*.classes)
+//    dependsOn docProjectVersionInfo
     ext.destinationDir = "$buildDir/html/groovy-jdk"
-    inputs.files sourceSets.tools.runtimeClasspath
-    outputs.dir destinationDir
-    doLast { task ->
-        try {
-            ant {
-                java(classname: 'org.codehaus.groovy.tools.DocGenerator',
-                     fork: 'true',
-                     failonerror: 'true',
-                     classpath: (configurations.tools + groovydocAll.groovyClasspath).asPath,
-                     errorproperty: 'edr',
-                     outputproperty: 'odr') {
-                    // either package name if in core or fully qualified path otherwise
-                    arg(value: 'org.codehaus.groovy.runtime.DefaultGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.DefaultGroovyStaticMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.DateGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.EncodingGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.IOGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.ProcessGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.ResourceGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.SocketGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.runtime.StringGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.vmplugin.v5.PluginDefaultGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.vmplugin.v6.PluginDefaultGroovyMethods')
-                    arg(value: 'org.codehaus.groovy.vmplugin.v6.PluginStaticGroovyMethods')
-                    // TODO don't hard-code these
-                    arg(value: 'subprojects/groovy-sql/src/main/java/org/codehaus/groovy/runtime/SqlGroovyMethods.java')
-                    arg(value: 'subprojects/groovy-swing/src/main/java/org/codehaus/groovy/runtime/SwingGroovyMethods.java')
-                    arg(value: 'subprojects/groovy-xml/src/main/java/org/codehaus/groovy/runtime/XmlGroovyMethods.java')
-                }
-            }
-        } finally {
-            if (ant.properties.odr) {
-                logger.info 'Out: ' + ant.properties.odr
-            }
-            if (ant.properties.edr) {
-                logger.error 'Err: ' + ant.properties.edr
-            }
-        }
-        copy {
-            into task.destinationDir
-            from 'src/tools/org/codehaus/groovy/tools/groovy.ico', 'src/tools/org/codehaus/groovy/tools/stylesheet.css'
-        }
-    }
+//    inputs.files sourceSets.tools.runtimeClasspath
+//    outputs.dir destinationDir
+//    doLast { task ->
+//        try {
+//            ant {
+//                java(classname: 'org.codehaus.groovy.tools.DocGenerator',
+//                     fork: 'true',
+//                     failonerror: 'true',
+//                     classpath: (configurations.tools + groovydocAll.groovyClasspath).asPath,
+//                     errorproperty: 'edr',
+//                     outputproperty: 'odr') {
+//                    // either package name if in core or fully qualified path otherwise
+//                    arg(value: 'org.codehaus.groovy.runtime.DefaultGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.DefaultGroovyStaticMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.DateGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.EncodingGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.IOGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.ProcessGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.ResourceGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.SocketGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.runtime.StringGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.vmplugin.v5.PluginDefaultGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.vmplugin.v6.PluginDefaultGroovyMethods')
+//                    arg(value: 'org.codehaus.groovy.vmplugin.v6.PluginStaticGroovyMethods')
+//                    // TODO don't hard-code these
+//                    arg(value: 'subprojects/groovy-sql/src/main/java/org/codehaus/groovy/runtime/SqlGroovyMethods.java')
+//                    arg(value: 'subprojects/groovy-swing/src/main/java/org/codehaus/groovy/runtime/SwingGroovyMethods.java')
+//                    arg(value: 'subprojects/groovy-xml/src/main/java/org/codehaus/groovy/runtime/XmlGroovyMethods.java')
+//                }
+//            }
+//        } finally {
+//            if (ant.properties.odr) {
+//                logger.info 'Out: ' + ant.properties.odr
+//            }
+//            if (ant.properties.edr) {
+//                logger.error 'Err: ' + ant.properties.edr
+//            }
+//        }
+//        copy {
+//            into task.destinationDir
+//            from 'src/tools/org/codehaus/groovy/tools/groovy.ico', 'src/tools/org/codehaus/groovy/tools/stylesheet.css'
+//        }
+//    }
 }
 
 // this will apply the javadoc fix tool to all generated javadocs
--- groovy-2.2.1+dfsg.orig/gradle/utils.gradle
+++ groovy-2.2.1+dfsg/gradle/utils.gradle
@@ -24,10 +24,11 @@ import static org.objectweb.asm.Opcodes.
 
 buildscript {
     repositories {
-        mavenCentral()
+        //mavenCentral()
+        mavenRepo url: "file:///usr/share/maven-repo"
     }
     dependencies {
-        classpath 'org.ow2.asm:asm:4.1'
+        classpath 'org.ow2.asm:asm:4.x'
     }
 }
 
--- groovy-2.2.1+dfsg.orig/subprojects/groovy-ant/build.gradle
+++ groovy-2.2.1+dfsg/subprojects/groovy-ant/build.gradle
@@ -1,5 +1,5 @@
 dependencies {
-    def antVersion = '1.9.2'
+    def antVersion = 'debian'
     compile project(':')
     groovy project(':')
     compile "org.apache.ant:ant:$antVersion"
--- groovy-2.2.1+dfsg.orig/subprojects/groovy-bsf/build.gradle
+++ groovy-2.2.1+dfsg/subprojects/groovy-bsf/build.gradle
@@ -2,7 +2,7 @@ dependencies {
     compile('bsf:bsf:2.4.0') {
         exclude(group: 'commons-logging', module: 'commons-logging')
     }
-    compile 'commons-logging:commons-logging:1.1.1'
+    compile 'commons-logging:commons-logging:debian'
     compile project(':')
     testCompile project(':groovy-test')
 }
--- groovy-2.2.1+dfsg.orig/subprojects/groovy-docgenerator/build.gradle
+++ groovy-2.2.1+dfsg/subprojects/groovy-docgenerator/build.gradle
@@ -3,5 +3,5 @@ dependencies {
     compile project(':groovy-templates')
     groovy project(':')
     testCompile project(':groovy-test')
-    compile 'com.thoughtworks.qdox:qdox:1.12.1'
+    compile 'com.thoughtworks.qdox:qdox:debian'
 }
--- groovy-2.2.1+dfsg.orig/subprojects/groovy-groovysh/build.gradle
+++ groovy-2.2.1+dfsg/subprojects/groovy-groovysh/build.gradle
@@ -1,5 +1,5 @@
 dependencies {
-    def jlineVersion = '2.10'
+    def jlineVersion = '2.x'
     compile project(':')
     groovy project(':')
     compile project(':groovy-console')
--- groovy-2.2.1+dfsg.orig/subprojects/groovy-servlet/build.gradle
+++ groovy-2.2.1+dfsg/subprojects/groovy-servlet/build.gradle
@@ -1,8 +1,8 @@
 dependencies {
-    compile('javax.servlet:servlet-api:2.4') { dep ->
+    compile('javax.servlet:servlet-api:2.5') { dep ->
         provided dep
     }
-    compile('javax.servlet:jsp-api:2.0') { dep ->
+    compile('javax.servlet.jsp:jsp-api:2.1') { dep ->
         provided dep
     }
     compile project(':')
